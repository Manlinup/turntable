<?php

namespace app\normal\model;

use think\Db;
use think\Model;

class Turntable extends Model{

    protected $name = 'turntable_game';
    protected $turntable_log = 'turntable_game_log';
    protected $turntable_prize = 'turntable_game_prize';


    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }


    /**
     * 所有转盘列表
     * @param  $shopId 商户id
     * @param $isShop 1商户，0普通用户
     * @param $page
     * @param $pageSize
     * @return false|\PDOStatement|string|\think\Collection
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function get_all_list($shopId,$page=0,$pageSize=20,$isShop = 0) {
        $where['shop_id'] = $shopId;
        if (empty($isShop)) {
            $where['status'] = 1;
        }
        $game = Db::name($this->name)
            ->where($where)
            ->order('listorder desc')
            ->limit($page*$pageSize,$pageSize)
            ->select();
        return $game;
    }


    /**
     * 大转盘列表数据
     * @param $shopId 商户id
     * @param $turntableId 转盘id
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function get_turntable_list($shopId, $turntableId) {

        $game = Db::name($this->name)
            ->where('shop_id',$shopId)
            ->where('turntable_id',$turntableId)
            ->where('status','1')
            ->find();

        $prize_list = Db::name($this->turntable_prize)
            ->where('turntable_id',$turntableId)
            ->where('status','1')
            ->order('listorder desc')
            ->select();

        if (empty($prize_list)) {
            return false;
        }

        foreach ($prize_list as $k => $v) {
            if ($game['turntable_id'] == $v['turntable_id']) {
                $game['list'][] = $v;
            }
        }
        $game['created'] = date("Y-m-d H:i:s",$game['created']);


        if (!empty($game)) {
            return $game;
        }
        return false;
    }

    /**
     * 用户的抽奖次数
     * @param  $turntableId
     * @param  $userId
     * @param  $times 规定的单人抽奖次数
     * @return array status 0 没有用户id，1没有中奖，2已经中奖了
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function check_user_times($turntableId,$userId,$times,$startTime,$endTime,$frequncy) {
        $data = array(
            'status' => 0,
            'prize_name' => '',
            'times' => $times
        );
        if (empty($userId)) {
            return $data;
        }
        if ($frequncy == 1) { //每天抽奖次数
            $userLogs = Db::name($this->turntable_log)
                ->where('turntable_id',$turntableId)
                ->where('userid',$userId)
                ->where('created','>=',strtotime(date("Y-m-d ")))
                ->where('created','<',strtotime('tomorrow'))
                ->order('id desc')
                ->select();
        } elseif ($frequncy == 2) { //活动期内抽奖次数
            $userLogs = Db::name($this->turntable_log)
                ->where('turntable_id',$turntableId)
                ->where('userid',$userId)
                ->where('created','>=',$startTime)
                ->where('created','<',$endTime)
                ->order('id desc')
                ->select();
        }


        $isWin = 0;
        $prizeId = '';
        foreach ($userLogs as $k => $v) {
            if ($v['type'] == 1) {
                if ($v['status'] == 0) {
                    continue;
                }
                $isWin ++;
                $prizeId = $v['prize_id'];
                break;
            }
        }

        if ($isWin > 0) { //当天已经中过奖了
            $prize = Db::name($this->turntable_prize)
                ->field('prize_name,img_url')
                ->where('id',$prizeId)
                ->find();
            $data['status'] = 2;
            $data['prize_name'] = $prize['prize_name'];
            $data['img_url'] = $prize['img_url'];
            $data['times'] = 0;
        } else { //中的都是谢谢惠顾或者没抽
            if (empty($userLogs)) {
                $data['status'] = 1;
                $data['prize_name'] = '';
                $data['img_url'] = '';
                $data['times'] = $times - count($userLogs);
                return $data;
            }
            $userLogs = array_reverse($userLogs);
            $prize = Db::name($this->turntable_prize)
                ->where('id',$userLogs[0]['prize_id'])
                ->find();
            $data['status'] = 1;
            $data['prize_name'] = $prize['prize_name'];
            $data['img_url'] = $prize['img_url'];
            $data['times'] = $times - count($userLogs);
        }

        return $data;
    }

    /**
     * 幸运榜列表。取中奖的前20
     * @param $turntableId
     * @return false|\PDOStatement|string|\think\Collection
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function get_lucky_list($turntableId) {
        $luckyLogs = Db::name($this->turntable_log)
            ->field('a.*,b.prize_name')
            ->alias('a')
            ->join($this->turntable_prize.' b','a.prize_id = b.id')
            ->where('a.type','1')
            ->where('a.status','1')
            ->where('a.turntable_id',$turntableId)
            ->order('a.id desc')
            ->limit(0,20)
            ->select();
        foreach ($luckyLogs as $k => $v) {
            $luckyLogs[$k]['created'] = date('Y-m-d H:i:s', $v['created']);
        }
        return $luckyLogs;
    }

    /**
     * play
     * @param $turntable_id
     * @param $user_id
     * @param $shopId
     * @return array|int
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function play($turntableId,$shopId,$userId) {

        $game = $this->get_turntable_list($shopId,$turntableId);

        if (empty($game)) {
            return -7;
        }
        //检验活动有效期
        if ($game['start_date'] > time()) {
            return -1;//活动还没开始
        }
        if ($game['end_date'] < time()) {
            return -2;//活动已经结束
        }

        if ($game['frequncy'] == 1) {//校验当天的抽奖情况
            $userLogs = Db::name($this->turntable_log)
                ->field('a.*,b.prize_name,b.img_url,b.id as p_id')
                ->alias('a')
                ->join($this->turntable_prize . ' b','a.prize_id = b.id')
                ->where('a.turntable_id',$turntableId)
                ->where('a.userid',$userId)
                ->where('a.created','>=',strtotime(date("Y-m-d ")))
                ->where('a.created','<',strtotime('tomorrow'))
                ->order('a.id asc')
                ->select();
        } elseif ($game['frequncy'] == 2) {//校验活动期内的抽奖情况
            $userLogs = Db::name($this->turntable_log)
                ->field('a.*,b.prize_name,b.img_url,b.id as p_id')
                ->alias('a')
                ->join($this->turntable_prize . ' b','a.prize_id = b.id')
                ->where('a.turntable_id',$turntableId)
                ->where('a.userid',$userId)
                ->where('a.created','>=',$game['start_date'])
                ->where('a.created','<',$game['end_date'])
                ->order('a.id asc')
                ->select();
        }

        $resultPlay = $this->check_user_times($turntableId,$userId,$game['num_by_one'],$game['start_date'],$game['end_date'],$game['frequncy']);
        foreach ($userLogs as $k => $v) {
            if ($v['type'] == 1) {
                $resultPlay['status'] = 2;
                $resultPlay['id'] = $v['p_id'];
                return $resultPlay;
            }
        }
        if (count($userLogs) >= $game['num_by_one']) {
            return -5;//已经抽满次数
        }

        //随机抽
        $lottryArr = [];
        $prizeArr = [];
        foreach ($game['list'] as $k => $v) {
            if ($v['num'] > 0) { //奖品数量大于0
                $lottryArr[$v['id']] = $v['probability'];
                $prizeArr[$v['id']] = $v['prize_name'];
                $prizeImgArr[$v['id']] = $v['img_url'];
            }
        }
        if (empty($lottryArr)) {
            return -6; //没有奖品了
        }
        $prizeId = $this->get_rand($lottryArr);
        $prizeName = $prizeArr[$prizeId];

        $type = 0;
        foreach ($game['list'] as $k => $v) {
            if ($v['id'] == $prizeId) {
                $type = $v['type'];
                break;
            }
        }

        if ($prizeName) {
            // 启动事务
            Db::startTrans();
            try{

                $data = [
                    'prize_id' => $prizeId,
                    'userid' => $userId,
                    'turntable_id' => $turntableId,
                    'shop_id' => $shopId,
                    'type' => $type,
                    'status' => 1,
                    'created' => time()
                ];
                Db::name($this->turntable_log)->insert($data);

                //奖品数量相应减1
                Db::name($this->turntable_prize)->where('id', $prizeId)->setDec('num');
                $resultPlay['status'] = 3;
                $resultPlay['id'] = $prizeId;
                // 提交事务
                Db::commit();
                return $resultPlay;
            } catch (\Exception $e) {
                // 回滚事务
                Db::rollback();
                return -3;//系统繁忙
            }
        }
        return -4;//系统异常
    }

    /**
     * 获取中奖的用户数据
     * @param $shopId
     * @param $turntableId
     * @param $userId
     * @param $startDate
     * @param $endDate
     * @return false|\PDOStatement|string|\think\Collection
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function win_list($shopId,$turntableId,$userId,$startDate,$endDate) {
        $where['a.shop_id'] = $shopId;
        $where['a.type'] = 1;
        if (!empty($turntableId)) {
            $where['a.turntable_id'] = $turntableId;
        }
        if (!empty($userId)) {
            $where['a.user_id'] = $userId;
        }
        if (!empty($startDate)) {
            $where['a.created'] = ['>',$startDate];
        }
        if (!empty($endDate)) {
            $where['a.created'] = ['<',$endDate];
        }
        $userLogs = Db::name($this->turntable_log)
            ->field('a.*,b.prize_name')
            ->alias('a')
            ->join($this->turntable_prize . ' b','a.prize_id = b.id')
            ->where($where)
            ->order('a.id desc')
            ->select();


        return $userLogs;
    }

    /**
     * 新增大转盘信息数据，返回自增id
     * @param $data
     * @return string
     */
    public function save_game($data) {
        Db::name($this->name)->insert($data);
        return Db::name($this->name)->getLastInsID();
    }

    /**
     * 更新大转盘信息数据，返回更新状态
     * @param $data
     * @param $turntableId
     * @return int|string
     * @throws \think\Exception
     * @throws \think\exception\PDOException
     */
    public function update_game($data,$turntableId) {
        $res = Db::name($this->name)
            ->where('turntable_id',$turntableId)
            ->update($data);
        return $res;
    }

    /**
     * 新增大转盘奖品数据，返回新增状态
     * @param $data
     * @param $turntableId
     * @return int|string
     */
    public function save_game_info($data) {
        $res = Db::name($this->turntable_prize)->insertAll($data);
        return $res;
    }

    /**
     * 更新单条奖品数据
     * @param $data
     * @param $turntableId
     * @param $prizeId
     * @return int|string
     * @throws \think\Exception
     * @throws \think\exception\PDOException
     */
    public function update_game_info($data,$turntableId,$prizeId) {
        $res = Db::name($this->turntable_prize)
            ->where('turntable_id',$turntableId)
            ->where('id',$prizeId)
            ->update($data);
        return $res;
    }

    /**
     * 获取单条转盘
     * @param $turntableId
     * @return bool|mixed
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function get_turntable_one($turntableId) {
        $game = Db::name($this->name)
            ->where('turntable_id',$turntableId)
            ->where('status','1')
            ->find();
        if (empty($game)) {
            return false;
        }
        $prizeList = Db::name($this->turntable_prize)
            ->where('turntable_id',$turntableId)
            ->where('status','1')
            ->select();

        $game['list'] = $prizeList;
        return $game;
    }

    /**
     * 大后台的转盘数据总览
     * @param int $page
     * @param int $pageSize
     * @param array $params
     * @param start_date,end_date,status,created 这几个字段是搜索字段
     * @return false|\PDOStatement|string|\think\Collection
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function get_list_for_bk($page=0,$pageSize=20,$params=[]) {
        $where=[];
        if (isset($params['start_date'])) {
            $where['start_date'] = ['>=',strtotime($params['start_date'])];
        }
        if (isset($params['end_date'])) {
            $where['end_date'] = ['<',strtotime($params['end_date'])];
        }
        if (!empty($params['status'])) {
            $where['status'] = $params['status'];
        }
        if (isset($params['created'])) {
            $where['created'] = ['>',strtotime($params['created'])];
        }

        $gameList = Db::name($this->name)
            ->where($where)
            ->order('turntable_id desc, shop_id')
            ->limit($page*$pageSize,$pageSize)
            ->select();

        $turntableIdArr = array_unique(array_column($gameList,'turntable_id'));

        $logData = Db::name($this->turntable_log)
            ->field('turntable_id,type,count(id) as nums')
            ->where('turntable_id',"in",$turntableIdArr)
            ->group('turntable_id,type')
            ->select();

        foreach ($gameList as $k => $v) {
            $noWinNum = 0;
            $winNum = 0;
            foreach ($logData as $key => $val) {
                if ($v['turntable_id'] == $val['turntable_id']) {
                    if ($val['type'] > 0 ) {
                        $winNum += $val['nums'];
                    } else {
                        $noWinNum += $val['nums'];
                    }
                }
            }
            $gameList[$k]['win_num'] = $winNum;
            $gameList[$k]['no_win_num'] = $noWinNum;
            $gameList[$k]['all_num'] = $winNum + $noWinNum;
        }

        return $gameList;
    }

    /**大后台的转盘奖品列表
     * @param $turntableId
     * @return false|\PDOStatement|string|\think\Collection
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function prize_list_for_bk($turntableId) {
        $prizeList = Db::name($this->turntable_prize)
            ->where('turntable_id',$turntableId)
            ->select();

        $prizeIdArr = array_unique(array_column($prizeList,'id'));
        $logData = Db::name($this->turntable_log)
            ->field('prize_id,type,count(id) as nums')
            ->where('prize_id',"in",$prizeIdArr)
            ->group('prize_id,type')
            ->select();

        foreach ($prizeList as $k => $v) {
            $prizeList[$k]['created'] = date('Y-m-d H:i:s',$v['created']);
            $selectNum = 0;
            foreach ($logData as $key => $val) {
                if ($v['id'] == $val['prize_id']) {
                    $selectNum += $val['nums'];
                }
            }
            $prizeList[$k]['select_num'] = $selectNum;
        }

        return $prizeList;
    }

    /**
     * 大后台中奖列表
     * @param int $page
     * @param int $pageSize
     * @param $prizeId
     * @param $turntableId
     * @return array|false|\PDOStatement|string|\think\Collection
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function win_list_for_bk($prizeId,$turntableId,$page=0,$pageSize=20) {
        $where['type'] = 1;
        $where['prize_id'] = $prizeId;
        $where['turntable_id'] = $turntableId;
        $userLogs = Db::name($this->turntable_log)
            ->where($where)
            ->order('id desc')
            ->limit($page*$pageSize,$pageSize)
            ->select();
        if (empty($userLogs)) {
            return [];
        }
        foreach ($userLogs as $k => $v) {
            $userLogs[$k]['created'] = date("Y-m-d H:i:s",$v['created']);
        }
        return $userLogs;
    }


    /**
     * 抽奖概率算法
     * @param $proArr
     * @return int|string
     */
    private function get_rand($proArr) {
        $result = '';

        //概率数组的总概率精度
        $proSum = array_sum($proArr);

        //概率数组循环
        foreach ($proArr as $k => $proCur) {
            $randNum = mt_rand(1,$proSum);
            if ($randNum <= $proCur) {
                $result = $k;
                break;
            } else {
                $proSum -= $proCur;
            }
        }
        unset($proArr);
        return $result;
    }


}